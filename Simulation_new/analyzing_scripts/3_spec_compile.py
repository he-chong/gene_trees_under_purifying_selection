import os, re, collections
from Bio import Phylo
from io import StringIO


# This is for compling the results generated by sim_gene_trees.py


def outer(treeStr):
    stripped = re.sub('\)$', '', re.sub('^\(', '', treeStr.strip().strip(";")))
    elements = stripped.split(',')
    for elem in elements:
        if "(" not in elem and ")" not in elem:
            return str(int(elem.strip().split(':')[0]))


def compileInfo(paraListDir, outFile):
    print(paraListDir)
    if not os.path.isfile(outFile):
        with open(outFile, "w") as outHandle:
            outHandle.write("\t".join(["Repeat", "Topology_1", "Topology_2", "Topology_3"])+"\n")
            for repeat in sorted(os.listdir(paraListDir), key=lambda i:int(i.strip(".tre").split("_")[1])):
                repeatFile = os.path.join(paraListDir, repeat)
                outerList = []
                with open(repeatFile) as repeatHandle:
                    for line in repeatHandle.readlines()[1:]:
                        treeStr = line.split("\t")[0]
                        outerList.append(outer(treeStr))
                count = collections.Counter(outerList)
                countStrList = [str(count[str(i+1)]) for i in range(3)] 
                outHandle.write("\t".join([repeat.split("_")[1]]+countStrList)+"\n")

                
def compileAll(rootDir):
    for divergence_time_2 in os.listdir(rootDir):
        dir_level1 = os.path.join(rootDir, divergence_time_2)
        if os.path.isdir(dir_level1):
            for selection_coefficient in os.listdir(dir_level1):
                dir_level2 = os.path.join(dir_level1, selection_coefficient)
                if os.path.isdir(dir_level2):
                    for paraList in os.listdir(dir_level2):
                        paraListDir = os.path.join(dir_level2, paraList)
                        if os.path.isdir(paraListDir):
                            outFile = os.path.join(dir_level2, "stat#"+paraList+".csv")
                            compileInfo(paraListDir, outFile)
                

if __name__ == '__main__':
    resultRoot = os.path.join("..", "..", "..", "Results", "Simulation_results_three_species") # The path of the simulation results generated by sim_gene_trees.py
    compileAll(resultRoot)
    print("OK")

